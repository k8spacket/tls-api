package tls_api

import (
	"github.com/k8spacket/tls-api/model"
	"reflect"
	"testing"
)

var clientTestData = []byte{22, 3, 1, 1, 58, 1, 0, 1, 54, 3, 3, 72, 77, 252, 35, 90, 44, 76, 77, 152, 103, 182, 53, 52, 125, 154, 150, 67, 64,
	166, 208, 119, 7, 12, 29, 124, 196, 159, 69, 97, 41, 82, 55, 32, 241, 32, 232, 136, 152, 78, 122, 135, 78, 64,
	230, 4, 209, 33, 104, 243, 110, 174, 52, 36, 231, 250, 249, 210, 160, 233, 109, 204, 114, 194, 140, 26, 0, 98, 19, 3, 19,
	2, 19, 1, 204, 169, 204, 168, 204, 170, 192, 48, 192, 44, 192, 40, 192, 36, 192, 20, 192, 10, 0, 159, 0, 107, 0, 57, 255,
	133, 0, 196, 0, 136, 0, 129, 0, 157, 0, 61, 0, 53, 0, 192, 0, 132, 192, 47, 192, 43, 192, 39, 192, 35, 192, 19, 192, 9, 0, 158,
	0, 103, 0, 51, 0, 190, 0, 69, 0, 156, 0, 60, 0, 47, 0, 186, 0, 65, 192, 17, 192, 7, 0, 5, 0, 4, 192, 18, 192, 8, 0, 22, 0, 10, 0,
	255, 1, 0, 0, 139, 0, 43, 0, 9, 8, 3, 4, 3, 3, 3, 2, 3, 1, 0, 51, 0, 38, 0, 36, 0, 29, 0, 32, 201, 116, 153, 141, 225, 152, 228,
	153, 105, 186, 34, 163, 51, 95, 143, 112, 126, 146, 194, 75, 197, 71, 67, 211, 199, 59, 77, 216, 65, 65, 105, 30, 0, 0,
	0, 14, 0, 12, 0, 0, 9, 103, 111, 111, 103, 108, 101, 46, 112, 108, 0, 11, 0, 2, 1, 0, 0, 10, 0, 10, 0, 8, 0, 29, 0, 23, 0, 24,
	0, 25, 0, 13, 0, 24, 0, 22, 8, 6, 6, 1, 6, 3, 8, 5, 5, 1, 5, 3, 8, 4, 4, 1, 4, 3, 2, 1, 2, 3, 0, 16, 0, 14, 0, 12, 2, 104, 50, 8,
	104, 116, 116, 112, 47, 49, 46, 49}

var clientExpectedResult = model.ClientHelloTLSRecord{
	RecordLayer: model.RecordLayer{
		HandshakeType: 0x0016,
		TLSVersion:    0x0301,
		Length:        0x013a,
	},
	HandshakeProtocol: model.HandshakeProtocol{
		HandshakeType: 0x1,
		Length:        [3]uint8{0x0, 0x1, 0x36},
		TLSVersion:    0x303,
		Random:        [32]uint8{0x48, 0x4d, 0xfc, 0x23, 0x5a, 0x2c, 0x4c, 0x4d, 0x98, 0x67, 0xb6, 0x35, 0x34, 0x7d, 0x9a, 0x96, 0x43, 0x40, 0xa6, 0xd0, 0x77, 0x7, 0xc, 0x1d, 0x7c, 0xc4, 0x9f, 0x45, 0x61, 0x29, 0x52, 0x37},
	},
	Session: model.Session{
		Length: 0x20,
		Id:     []uint8{0xf1, 0x20, 0xe8, 0x88, 0x98, 0x4e, 0x7a, 0x87, 0x4e, 0x40, 0xe6, 0x4, 0xd1, 0x21, 0x68, 0xf3, 0x6e, 0xae, 0x34, 0x24, 0xe7, 0xfa, 0xf9, 0xd2, 0xa0, 0xe9, 0x6d, 0xcc, 0x72, 0xc2, 0x8c, 0x1a},
	},
	Ciphers: model.Ciphers{
		Length: 0x62,
		Value:  []uint8{0x13, 0x3, 0x13, 0x2, 0x13, 0x1, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0xa, 0x0, 0x9f, 0x0, 0x6b, 0x0, 0x39, 0xff, 0x85, 0x0, 0xc4, 0x0, 0x88, 0x0, 0x81, 0x0, 0x9d, 0x0, 0x3d, 0x0, 0x35, 0x0, 0xc0, 0x0, 0x84, 0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x9, 0x0, 0x9e, 0x0, 0x67, 0x0, 0x33, 0x0, 0xbe, 0x0, 0x45, 0x0, 0x9c, 0x0, 0x3c, 0x0, 0x2f, 0x0, 0xba, 0x0, 0x41, 0xc0, 0x11, 0xc0, 0x7, 0x0, 0x5, 0x0, 0x4, 0xc0, 0x12, 0xc0, 0x8, 0x0, 0x16, 0x0, 0xa, 0x0, 0xff},
	},
	CompressionMethods: model.CompressionMethods{
		Length: 0x1,
		Value:  []uint8{0x0},
	},
	Extensions: model.Extensions{
		Length: 0x8b,
		Extensions: map[uint16]model.Extension{
			0x0: model.Extension{
				Type:   0x0,
				Length: 0xe,
				Value:  []uint8{0x0, 0xc, 0x0, 0x0, 0x9, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x6c},
			},
			0xa: model.Extension{
				Type:   0xa,
				Length: 0xa,
				Value:  []uint8{0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19},
			},
			0xb: model.Extension{
				Type:   0xb,
				Length: 0x2,
				Value:  []uint8{0x1, 0x0},
			},
			0xd: model.Extension{
				Type:   0xd,
				Length: 0x18,
				Value:  []uint8{0x0, 0x16, 0x8, 0x6, 0x6, 0x1, 0x6, 0x3, 0x8, 0x5, 0x5, 0x1, 0x5, 0x3, 0x8, 0x4, 0x4, 0x1, 0x4, 0x3, 0x2, 0x1, 0x2, 0x3},
			},
			0x10: model.Extension{
				Type:   0x10,
				Length: 0xe,
				Value:  []uint8{0x0, 0xc, 0x2, 0x68, 0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31},
			},
			0x2b: model.Extension{
				Type:   0x2b,
				Length: 0x9,
				Value:  []uint8{0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1},
			},
			0x33: model.Extension{
				Type:   0x33,
				Length: 0x26,
				Value:  []uint8{0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0xc9, 0x74, 0x99, 0x8d, 0xe1, 0x98, 0xe4, 0x99, 0x69, 0xba, 0x22, 0xa3, 0x33, 0x5f, 0x8f, 0x70, 0x7e, 0x92, 0xc2, 0x4b, 0xc5, 0x47, 0x43, 0xd3, 0xc7, 0x3b, 0x4d, 0xd8, 0x41, 0x41, 0x69, 0x1e},
			},
		},
	},
	ResolvedClientFields: model.ResolvedClientFields{
		ServerName: "google.pl",
		SupportedVersions: []string{
			"TLS 1.3",
			"TLS 1.2",
			"TLS 1.1",
			"TLS 1.0",
		},
		Ciphers: []string{
			"TLS_CHACHA20_POLY1305_SHA256",
			"TLS_AES_256_GCM_SHA384",
			"TLS_AES_128_GCM_SHA256",
			"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
			"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
			"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
			"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
			"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
			"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
			"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
			"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
			"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
			"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
			"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
			"TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
			"TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
			"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256",
			"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",
			"TLS_GOSTR341001_WITH_28147_CNT_IMIT",
			"TLS_RSA_WITH_AES_256_GCM_SHA384",
			"TLS_RSA_WITH_AES_256_CBC_SHA256",
			"TLS_RSA_WITH_AES_256_CBC_SHA",
			"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256",
			"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",
			"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
			"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
			"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
			"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
			"TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
			"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
			"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",
			"TLS_RSA_WITH_AES_128_GCM_SHA256",
			"TLS_RSA_WITH_AES_128_CBC_SHA256",
			"TLS_RSA_WITH_AES_128_CBC_SHA",
			"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256",
			"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",
			"TLS_ECDHE_RSA_WITH_RC4_128_SHA",
			"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
			"TLS_RSA_WITH_RC4_128_SHA",
			"TLS_RSA_WITH_RC4_128_MD5",
			"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
			"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
			"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
			"TLS_RSA_WITH_3DES_EDE_CBC_SHA",
			"TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
		},
	},
}

var serverTestData = []byte{22, 3, 3, 0, 122, 2, 0, 0, 118, 3, 3, 23, 117, 135, 200, 11, 134, 69, 35, 63, 40, 219, 3, 223,
	211, 85, 68, 11, 80, 245, 186, 4, 213, 163, 39, 245, 41, 139, 73, 35, 10, 104, 154, 32, 60, 214, 14, 30, 123, 252,
	147, 92, 214, 247, 25, 57, 23, 90, 83, 222, 188, 186, 154, 45, 49, 155, 78, 147, 59, 248, 246, 49, 186, 215, 240,
	141, 19, 3, 0, 0, 46, 0, 51, 0, 36, 0, 29, 0, 32, 87, 176, 233, 179, 164, 169, 68, 143, 146, 184, 186, 180, 250,
	183, 56, 206, 89, 223, 53, 66, 121, 239, 124, 152, 163, 89, 14, 22, 9, 124, 81, 27, 0, 43, 0, 2, 3, 4, 20, 3, 3,
	0, 1, 1, 23, 3, 3, 16, 60, 93, 32, 144, 144, 129, 17, 179, 164, 251, 125, 219, 184, 196, 56, 47, 14, 47, 149, 169,
	7, 227, 177, 239, 59, 229, 169, 131, 28, 156, 125, 181, 87, 64, 202, 122, 92, 2, 152, 250, 166, 8, 204, 2, 178, 115,
	241, 14, 101, 171, 181, 219, 33, 119, 147, 225, 106, 231, 145, 104, 123, 122, 167, 165, 246, 219, 117, 127, 184, 176,
	8, 210, 41, 214, 78, 147, 118, 184, 160, 106, 102, 198, 151, 154, 238, 26, 50, 18, 193, 85, 123, 175, 135, 163, 203, 37,
	225, 125, 133, 167, 159, 192, 131, 196, 78, 144, 31, 28, 204, 156, 20, 55, 90, 39, 84, 55, 19, 141, 6, 191, 131, 209, 18,
	100, 126, 139, 71, 111, 174, 10, 133, 253, 236, 117, 20, 228, 102, 191, 168, 96, 121, 69, 124, 19, 149, 182, 1, 52, 182, 231,
	141, 169, 31, 96, 181, 10, 117, 139, 246, 116, 137, 74, 247, 175, 50, 190, 188, 89, 172, 117, 48, 8, 245, 84, 27, 0, 131, 66,
	26, 233, 89, 217, 61, 148, 181, 219, 150, 20, 117, 177, 141, 191, 200, 22, 53, 78, 33, 79, 101, 154, 242, 8, 196, 65, 253,
	40, 249, 175, 182, 199, 75, 207, 62, 20, 236, 171, 72, 75, 182, 90, 162, 138, 130, 209, 55, 13, 110, 165, 245, 210, 81, 77,
	188, 95, 13, 7, 13, 247, 55, 143, 147, 47, 249, 181, 7, 191, 204, 204, 175, 169, 175, 108, 79, 180, 145, 62, 31, 204, 245,
	243, 78, 3, 209, 138, 131, 153, 72, 122, 92, 75, 13, 117, 54, 196, 40, 43, 240, 225, 209, 237, 25, 141, 207, 165, 72, 239,
	252, 79, 9, 185, 62, 77, 98, 61, 180, 47, 235, 41, 37, 19, 39, 248, 194, 71, 150, 54, 210, 44, 39, 188, 210, 60, 140, 254,
	177, 250, 152, 212, 245, 170, 191, 107, 97, 40, 76, 105, 28, 28, 84, 70, 1, 235, 192, 223, 231, 223, 115, 80, 96, 158, 17,
	217, 159, 242, 106, 127, 68, 79, 98, 72, 87, 13, 122, 18, 237, 125, 167, 187, 54, 193, 52, 196, 143, 111, 191, 124, 183,
	45, 127, 160, 80, 67, 171, 68, 140, 49, 240, 89, 13, 237, 245, 115, 164, 161, 230, 143, 134, 41, 212, 99, 158, 4, 70, 181,
	198, 88, 104, 168, 57, 168, 88, 162, 163, 125, 24, 51, 202, 253, 59, 26, 194, 99, 70, 0, 179, 5, 24, 29, 230, 155, 13, 85,
	145, 180, 124, 143, 239, 247, 84, 19, 60, 5, 80, 187, 149, 41, 104, 44, 2, 170, 193, 218, 222, 12, 169, 179, 82, 215, 47,
	246, 69, 49, 251, 17, 160, 210, 255, 67, 87, 211, 185, 235, 189, 205, 195, 74, 157, 103, 66, 175, 4, 251, 26, 253, 40, 14,
	48, 139, 219, 2, 190, 130, 5, 95, 88, 63, 155, 6, 112, 83, 129, 243, 234, 179, 19, 182, 197, 153, 75, 214, 46, 67, 243,
	225, 108, 253, 80, 232, 99, 60, 171, 233, 83, 84, 131, 97, 230, 70, 78, 92, 105, 21, 17, 250, 131, 125, 153, 77, 33, 192,
	45, 161, 197, 180, 182, 30, 45, 86, 147, 152, 150, 44, 148, 8, 31, 104, 165, 222, 219, 123, 134, 86, 133, 33, 72, 105, 55,
	134, 36, 43, 250, 40, 191, 83, 227, 16, 233, 104, 79, 125, 41, 70, 175, 141, 254, 149, 107, 113, 246, 237, 72, 71, 252, 84,
	32, 146, 211, 187, 116, 239, 74, 204, 121, 83, 49, 63, 28, 22, 76, 179, 221, 19, 55, 75, 227, 97, 103, 5, 228, 174, 91, 27,
	43, 253, 247, 191, 145, 94, 80, 123, 80, 201, 92, 112, 90, 19, 114, 110, 13, 194, 143, 66, 38, 203, 136, 153, 110, 142, 190,
	83, 109, 168, 236, 20, 143, 5, 234, 19, 241, 206, 90, 100, 120, 217, 16, 184, 176, 70, 2, 10, 11, 193, 164, 13, 52, 21, 87,
	32, 72, 143, 194, 106, 50, 119, 5, 14, 95, 188, 159, 49, 128, 76, 237, 166, 218, 143, 193, 214, 254, 196, 25, 136, 52, 95,
	247, 128, 15, 24, 178, 230, 148, 189, 107, 123, 108, 140, 221, 197, 21, 233, 141, 34, 205, 1, 10, 134, 68, 220, 240, 178,
	96, 81, 101, 18, 52, 200, 193, 81, 64, 174, 7, 37, 102, 97, 90, 232, 164, 96, 69, 63, 110, 77, 238, 77, 216, 188, 204, 39,
	221, 86, 236, 135, 18, 171, 77, 109, 156, 122, 87, 38, 86, 154}

var serverExpectedResult = model.ServerHelloTLSRecord{
	RecordLayer: model.RecordLayer{
		HandshakeType: 0x16,
		TLSVersion:    0x303,
		Length:        0x7a,
	},
	HandshakeProtocol: model.HandshakeProtocol{
		HandshakeType: 0x2,
		Length:        [3]uint8{0x0, 0x0, 0x76},
		TLSVersion:    0x303,
		Random:        [32]uint8{0x17, 0x75, 0x87, 0xc8, 0xb, 0x86, 0x45, 0x23, 0x3f, 0x28, 0xdb, 0x3, 0xdf, 0xd3, 0x55, 0x44, 0xb, 0x50, 0xf5, 0xba, 0x4, 0xd5, 0xa3, 0x27, 0xf5, 0x29, 0x8b, 0x49, 0x23, 0xa, 0x68, 0x9a},
	},
	Session: model.Session{
		Length: 0x20,
		Id:     []uint8{0x3c, 0xd6, 0xe, 0x1e, 0x7b, 0xfc, 0x93, 0x5c, 0xd6, 0xf7, 0x19, 0x39, 0x17, 0x5a, 0x53, 0xde, 0xbc, 0xba, 0x9a, 0x2d, 0x31, 0x9b, 0x4e, 0x93, 0x3b, 0xf8, 0xf6, 0x31, 0xba, 0xd7, 0xf0, 0x8d},
	},
	CipherSuite: model.CipherSuite{
		Value: 0x1303},
	CompressionMethods: model.CompressionMethods{
		Length: 0x0,
		Value:  []uint8{},
	},
	Extensions: model.Extensions{
		Length: 0x2e,
		Extensions: map[uint16]model.Extension{
			0x2b: model.Extension{
				Type:   0x2b,
				Length: 0x2,
				Value:  []uint8{0x3, 0x4},
			},
			0x33: model.Extension{
				Type:   0x33,
				Length: 0x24,
				Value:  []uint8{0x0, 0x1d, 0x0, 0x20, 0x57, 0xb0, 0xe9, 0xb3, 0xa4, 0xa9, 0x44, 0x8f, 0x92, 0xb8, 0xba, 0xb4, 0xfa, 0xb7, 0x38, 0xce, 0x59, 0xdf, 0x35, 0x42, 0x79, 0xef, 0x7c, 0x98, 0xa3, 0x59, 0xe, 0x16, 0x9, 0x7c, 0x51, 0x1b},
			},
			0x1403: model.Extension{
				Type:   0x1403,
				Length: 0x300,
				Value:  []uint8{0x1, 0x1, 0x17, 0x3, 0x3, 0x10, 0x3c, 0x5d, 0x20, 0x90, 0x90, 0x81, 0x11, 0xb3, 0xa4, 0xfb, 0x7d, 0xdb, 0xb8, 0xc4, 0x38, 0x2f, 0xe, 0x2f, 0x95, 0xa9, 0x7, 0xe3, 0xb1, 0xef, 0x3b, 0xe5, 0xa9, 0x83, 0x1c, 0x9c, 0x7d, 0xb5, 0x57, 0x40, 0xca, 0x7a, 0x5c, 0x2, 0x98, 0xfa, 0xa6, 0x8, 0xcc, 0x2, 0xb2, 0x73, 0xf1, 0xe, 0x65, 0xab, 0xb5, 0xdb, 0x21, 0x77, 0x93, 0xe1, 0x6a, 0xe7, 0x91, 0x68, 0x7b, 0x7a, 0xa7, 0xa5, 0xf6, 0xdb, 0x75, 0x7f, 0xb8, 0xb0, 0x8, 0xd2, 0x29, 0xd6, 0x4e, 0x93, 0x76, 0xb8, 0xa0, 0x6a, 0x66, 0xc6, 0x97, 0x9a, 0xee, 0x1a, 0x32, 0x12, 0xc1, 0x55, 0x7b, 0xaf, 0x87, 0xa3, 0xcb, 0x25, 0xe1, 0x7d, 0x85, 0xa7, 0x9f, 0xc0, 0x83, 0xc4, 0x4e, 0x90, 0x1f, 0x1c, 0xcc, 0x9c, 0x14, 0x37, 0x5a, 0x27, 0x54, 0x37, 0x13, 0x8d, 0x6, 0xbf, 0x83, 0xd1, 0x12, 0x64, 0x7e, 0x8b, 0x47, 0x6f, 0xae, 0xa, 0x85, 0xfd, 0xec, 0x75, 0x14, 0xe4, 0x66, 0xbf, 0xa8, 0x60, 0x79, 0x45, 0x7c, 0x13, 0x95, 0xb6, 0x1, 0x34, 0xb6, 0xe7, 0x8d, 0xa9, 0x1f, 0x60, 0xb5, 0xa, 0x75, 0x8b, 0xf6, 0x74, 0x89, 0x4a, 0xf7, 0xaf, 0x32, 0xbe, 0xbc, 0x59, 0xac, 0x75, 0x30, 0x8, 0xf5, 0x54, 0x1b, 0x0, 0x83, 0x42, 0x1a, 0xe9, 0x59, 0xd9, 0x3d, 0x94, 0xb5, 0xdb, 0x96, 0x14, 0x75, 0xb1, 0x8d, 0xbf, 0xc8, 0x16, 0x35, 0x4e, 0x21, 0x4f, 0x65, 0x9a, 0xf2, 0x8, 0xc4, 0x41, 0xfd, 0x28, 0xf9, 0xaf, 0xb6, 0xc7, 0x4b, 0xcf, 0x3e, 0x14, 0xec, 0xab, 0x48, 0x4b, 0xb6, 0x5a, 0xa2, 0x8a, 0x82, 0xd1, 0x37, 0xd, 0x6e, 0xa5, 0xf5, 0xd2, 0x51, 0x4d, 0xbc, 0x5f, 0xd, 0x7, 0xd, 0xf7, 0x37, 0x8f, 0x93, 0x2f, 0xf9, 0xb5, 0x7, 0xbf, 0xcc, 0xcc, 0xaf, 0xa9, 0xaf, 0x6c, 0x4f, 0xb4, 0x91, 0x3e, 0x1f, 0xcc, 0xf5, 0xf3, 0x4e, 0x3, 0xd1, 0x8a, 0x83, 0x99, 0x48, 0x7a, 0x5c, 0x4b, 0xd, 0x75, 0x36, 0xc4, 0x28, 0x2b, 0xf0, 0xe1, 0xd1, 0xed, 0x19, 0x8d, 0xcf, 0xa5, 0x48, 0xef, 0xfc, 0x4f, 0x9, 0xb9, 0x3e, 0x4d, 0x62, 0x3d, 0xb4, 0x2f, 0xeb, 0x29, 0x25, 0x13, 0x27, 0xf8, 0xc2, 0x47, 0x96, 0x36, 0xd2, 0x2c, 0x27, 0xbc, 0xd2, 0x3c, 0x8c, 0xfe, 0xb1, 0xfa, 0x98, 0xd4, 0xf5, 0xaa, 0xbf, 0x6b, 0x61, 0x28, 0x4c, 0x69, 0x1c, 0x1c, 0x54, 0x46, 0x1, 0xeb, 0xc0, 0xdf, 0xe7, 0xdf, 0x73, 0x50, 0x60, 0x9e, 0x11, 0xd9, 0x9f, 0xf2, 0x6a, 0x7f, 0x44, 0x4f, 0x62, 0x48, 0x57, 0xd, 0x7a, 0x12, 0xed, 0x7d, 0xa7, 0xbb, 0x36, 0xc1, 0x34, 0xc4, 0x8f, 0x6f, 0xbf, 0x7c, 0xb7, 0x2d, 0x7f, 0xa0, 0x50, 0x43, 0xab, 0x44, 0x8c, 0x31, 0xf0, 0x59, 0xd, 0xed, 0xf5, 0x73, 0xa4, 0xa1, 0xe6, 0x8f, 0x86, 0x29, 0xd4, 0x63, 0x9e, 0x4, 0x46, 0xb5, 0xc6, 0x58, 0x68, 0xa8, 0x39, 0xa8, 0x58, 0xa2, 0xa3, 0x7d, 0x18, 0x33, 0xca, 0xfd, 0x3b, 0x1a, 0xc2, 0x63, 0x46, 0x0, 0xb3, 0x5, 0x18, 0x1d, 0xe6, 0x9b, 0xd, 0x55, 0x91, 0xb4, 0x7c, 0x8f, 0xef, 0xf7, 0x54, 0x13, 0x3c, 0x5, 0x50, 0xbb, 0x95, 0x29, 0x68, 0x2c, 0x2, 0xaa, 0xc1, 0xda, 0xde, 0xc, 0xa9, 0xb3, 0x52, 0xd7, 0x2f, 0xf6, 0x45, 0x31, 0xfb, 0x11, 0xa0, 0xd2, 0xff, 0x43, 0x57, 0xd3, 0xb9, 0xeb, 0xbd, 0xcd, 0xc3, 0x4a, 0x9d, 0x67, 0x42, 0xaf, 0x4, 0xfb, 0x1a, 0xfd, 0x28, 0xe, 0x30, 0x8b, 0xdb, 0x2, 0xbe, 0x82, 0x5, 0x5f, 0x58, 0x3f, 0x9b, 0x6, 0x70, 0x53, 0x81, 0xf3, 0xea, 0xb3, 0x13, 0xb6, 0xc5, 0x99, 0x4b, 0xd6, 0x2e, 0x43, 0xf3, 0xe1, 0x6c, 0xfd, 0x50, 0xe8, 0x63, 0x3c, 0xab, 0xe9, 0x53, 0x54, 0x83, 0x61, 0xe6, 0x46, 0x4e, 0x5c, 0x69, 0x15, 0x11, 0xfa, 0x83, 0x7d, 0x99, 0x4d, 0x21, 0xc0, 0x2d, 0xa1, 0xc5, 0xb4, 0xb6, 0x1e, 0x2d, 0x56, 0x93, 0x98, 0x96, 0x2c, 0x94, 0x8, 0x1f, 0x68, 0xa5, 0xde, 0xdb, 0x7b, 0x86, 0x56, 0x85, 0x21, 0x48, 0x69, 0x37, 0x86, 0x24, 0x2b, 0xfa, 0x28, 0xbf, 0x53, 0xe3, 0x10, 0xe9, 0x68, 0x4f, 0x7d, 0x29, 0x46, 0xaf, 0x8d, 0xfe, 0x95, 0x6b, 0x71, 0xf6, 0xed, 0x48, 0x47, 0xfc, 0x54, 0x20, 0x92, 0xd3, 0xbb, 0x74, 0xef, 0x4a, 0xcc, 0x79, 0x53, 0x31, 0x3f, 0x1c, 0x16, 0x4c, 0xb3, 0xdd, 0x13, 0x37, 0x4b, 0xe3, 0x61, 0x67, 0x5, 0xe4, 0xae, 0x5b, 0x1b, 0x2b, 0xfd, 0xf7, 0xbf, 0x91, 0x5e, 0x50, 0x7b, 0x50, 0xc9, 0x5c, 0x70, 0x5a, 0x13, 0x72, 0x6e, 0xd, 0xc2, 0x8f, 0x42, 0x26, 0xcb, 0x88, 0x99, 0x6e, 0x8e, 0xbe, 0x53, 0x6d, 0xa8, 0xec, 0x14, 0x8f, 0x5, 0xea, 0x13, 0xf1, 0xce, 0x5a, 0x64, 0x78, 0xd9, 0x10, 0xb8, 0xb0, 0x46, 0x2, 0xa, 0xb, 0xc1, 0xa4, 0xd, 0x34, 0x15, 0x57, 0x20, 0x48, 0x8f, 0xc2, 0x6a, 0x32, 0x77, 0x5, 0xe, 0x5f, 0xbc, 0x9f, 0x31, 0x80, 0x4c, 0xed, 0xa6, 0xda, 0x8f, 0xc1, 0xd6, 0xfe, 0xc4, 0x19, 0x88, 0x34, 0x5f, 0xf7, 0x80, 0xf, 0x18, 0xb2, 0xe6, 0x94, 0xbd, 0x6b, 0x7b, 0x6c, 0x8c, 0xdd, 0xc5, 0x15, 0xe9, 0x8d, 0x22, 0xcd, 0x1, 0xa, 0x86, 0x44, 0xdc, 0xf0, 0xb2, 0x60, 0x51, 0x65, 0x12, 0x34, 0xc8, 0xc1, 0x51, 0x40, 0xae, 0x7, 0x25, 0x66, 0x61, 0x5a, 0xe8, 0xa4, 0x60, 0x45, 0x3f, 0x6e, 0x4d, 0xee, 0x4d, 0xd8, 0xbc, 0xcc, 0x27, 0xdd, 0x56, 0xec, 0x87, 0x12, 0xab, 0x4d, 0x6d, 0x9c, 0x7a, 0x57, 0x26, 0x56, 0x9a},
			},
		},
	},
	ResolvedServerFields: model.ResolvedServerFields{
		SupportedVersion: "TLS 1.3",
		Cipher:           "TLS_CHACHA20_POLY1305_SHA256",
	},
}

func TestClientHelloTLSRecord(t *testing.T) {
	var got = ParseTLSPayload(clientTestData).(model.ClientHelloTLSRecord)
	var want = clientExpectedResult
	if !reflect.DeepEqual(got, want) {
		t.Errorf("TLS ClientHello packet processing failed:\ngot:\n%#v\n\nwant:\n%#v\n\n", got, want)
	}
}

func TestServerHelloTLSRecord(t *testing.T) {
	var got = ParseTLSPayload(serverTestData).(model.ServerHelloTLSRecord)
	var want = serverExpectedResult
	if !reflect.DeepEqual(got, want) {
		t.Errorf("TLS ServerHello packet processing failed:\ngot:\n%#v\n\nwant:\n%#v\n\n", got, want)
	}
}
